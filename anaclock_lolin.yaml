substitutions:
  devicename: anaclock
  upper_devicename: AnaClock
  ip: 192.168.102.120

globals:
  - id: init_done
    type: int
    restore_value: no
    initial_value: '0'

esphome:
  name: ${devicename}
  platform: ESP8266
  board: nodemcuv2
  on_boot:
    priority: -100
    then:
      - lambda: !lambda |-
          if (!id(init_done)) {
            for (int i=0; i < 100; i++) {
              ESP_LOGD("main", "bootanimation up %d", i);
              id(pwm_hour).set_level(float(i) / 100.0 * 0.86);
              id(pwm_minute).set_level(float(i) / 100.0 * 0.84);
              id(pwm_second).set_level(float(i) / 100.0 * 0.84);
              delay(25);
            }
            for (int i=100; i >=0 ; i--) {
              ESP_LOGD("main", "bootanimation down %d", i);
              id(pwm_hour).set_level(float(i) / 100.0 * 0.86);
              id(pwm_minute).set_level(float(i) / 100.0 * 0.84);
              id(pwm_second).set_level(float(i) / 100.0 * 0.84);
              delay(25);
            }
          }
          id(init_done)=1;


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${upper_devicename} Fallback Hotspot"
    password: !secret ap_password

  manual_ip:
    static_ip: $ip
    gateway: 192.168.102.1
    subnet: 255.255.255.0
    dns1: 192.168.102.1

# Enable logging
logger:

# Enable Home Assistant API
#api:

ota:

#
# Application stuff
#
output:
  - platform: esp8266_pwm
    pin: D1
    frequency: 1000 Hz
    id: pwm_hour
  - platform: esp8266_pwm
    pin: D2
    frequency: 1000 Hz
    id: pwm_minute
  - platform: esp8266_pwm
    pin: D5
    frequency: 1000 Hz
    id: pwm_second


time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    on_time:
      # Every second
      - seconds: "*"
        minutes: "*"
        hours: "*"
        then:
          - logger.log:
              format: "Time: %02d:%02d:%02d"
              args: [ 'id(sntp_time).now().hour', 'id(sntp_time).now().minute', 'id(sntp_time).now().second' ]
          - lambda: !lambda |-
              if (id(init_done)) {
                auto time = id(sntp_time).now();
                int hour=time.hour % 12;
                if (hour == 0) { hour = 12; }
                hour--;
                id(pwm_hour).set_level(float(hour) / 12.0 * 0.86);
                id(pwm_minute).set_level(float(time.minute) / 60.0 * 0.84);
                id(pwm_second).set_level(float(time.second) / 60.0 * 0.84);
              }
