substitutions:
  devicename: anaclock
  upper_devicename: AnaClock
  ip: 192.168.102.120

esphome:
  name: ${devicename}
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${upper_devicename} Fallback Hotspot"
    password: !secret ap_password

  manual_ip:
    static_ip: $ip
    gateway: 192.168.102.1
    subnet: 255.255.255.0
    dns1: 192.168.102.1

# Enable logging
logger:

# Enable Home Assistant API
#api:

ota:

output:
  - platform: esp8266_pwm
    pin: D1
    frequency: 1000 Hz
    id: pwm_hour
  - platform: esp8266_pwm
    pin: D2
    frequency: 1000 Hz
    id: pwm_minute
  - platform: esp8266_pwm
    pin: D5
    frequency: 1000 Hz
    id: pwm_second

globals:
        - id: init_done
          type: int
          restore_value: no
          initial_value: '0'

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
        - repeat:
                count: 12
                then: 
                  - lambda: !lambda |-
                        static int counter=0;
                        id(pwm_hour).set_level(float(counter) / 12.0 * 0.95);
                        id(pwm_minute).set_level(float(counter * 5) / 60.0 * 0.84);
                        id(pwm_second).set_level(float(counter * 5) / 60.0 * 0.84);
                        counter++;
                        if (counter > 12) { counter = 0; };
                  - delay: 0.5s
        - lambda: !lambda |-
                id(init_done)=1;

    on_time:
      # Every second
      - seconds: "*"
        minutes: "*"
        hours: "*"
        then:
          - logger.log:
              format: "Time: %02d:%02d:%02d"
              args: [ 'id(sntp_time).now().hour', 'id(sntp_time).now().minute', 'id(sntp_time).now().second' ]
          - lambda: !lambda |-
              if (id(init_done)) {
                auto time = id(sntp_time).now();
                int hour=time.hour % 12;
                if (hour == 0) { hour = 12; }
                hour--;
                id(pwm_hour).set_level(float(hour) / 12.0 * 0.95); 
                id(pwm_minute).set_level(float(time.minute) / 60.0 * 0.84); 
                id(pwm_second).set_level(float(time.second) / 60.0 * 0.84); 
              }

